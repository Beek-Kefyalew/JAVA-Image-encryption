/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package javafinal;
//basic packages to build graphical user interfaces
import java.awt.*;
import java.awt.image.*;
import java.awt.event.*;
import javax.swing.*;
//packages to use images from files
import javax.imageio.ImageIO;
import java.io.File;
//
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
//java cryptographic extenaion Engines
import javax.crypto.*;	
import javax.crypto.spec.*;
/**
 *
 * @author blue
 */
public class NewJFrame extends javax.swing.JFrame {

    private File imageFile;
    private ImageRead panel; //Variable ImageRead class
    private ImageEncrypt encrypter; //variable Image Encrypt class
    private File fileName;


    /**
     * Creates new form NewJFrame
     */
    public NewJFrame() {
        initComponents();
        encrypter = new ImageEncrypt();
        panel = new ImageRead();
        
        
        panel.setBounds(175, 5, 900, 500);
        panel.setBorder(BorderFactory.createStrokeBorder(new BasicStroke(5.0f)));
        this.add(panel);
    }

    
    
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(77, 83, 117));

        jLabel1.setBackground(new java.awt.Color(77, 83, 117));
        jLabel1.setFont(new java.awt.Font("Yu Gothic", 0, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(149, 157, 191));
        jLabel1.setText("JCRYPT xII");

        jSeparator2.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jSeparator2.setAlignmentX(0.0F);
        jSeparator2.setAlignmentY(0.0F);

        jButton1.setBackground(new java.awt.Color(76, 82, 114));
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setText("Set Password");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setBackground(new java.awt.Color(76, 82, 114));
        jButton2.setForeground(new java.awt.Color(255, 255, 255));
        jButton2.setText("Encrypt");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setBackground(new java.awt.Color(76, 82, 114));
        jButton3.setForeground(new java.awt.Color(255, 255, 255));
        jButton3.setText("Decrypt");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setBackground(new java.awt.Color(76, 82, 114));
        jButton4.setForeground(new java.awt.Color(255, 255, 255));
        jButton4.setText("Save");
        jButton4.setActionCommand("Save");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setBackground(new java.awt.Color(76, 82, 114));
        jButton5.setForeground(new java.awt.Color(255, 255, 255));
        jButton5.setText("Save As");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setBackground(new java.awt.Color(76, 82, 114));
        jButton6.setForeground(new java.awt.Color(255, 255, 255));
        jButton6.setText("OPEN FILE");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addComponent(jLabel1)
                        .addGap(43, 43, 43))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(626, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator2)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24)
                .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(14, 14, 14)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(52, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
 String key = new String(encrypter.getKey());

        key = (String)JOptionPane.showInputDialog(this,
                "Enter a 16 byte key (current key= " +
                        key.getBytes().length + " bytes)",key);

        while(key != null && key.getBytes().length != 16){

            key = (String)JOptionPane.showInputDialog(this,
                    "Enter a 16 byte key (current key= " +
                            key.getBytes().length + " bytes)",key);
        }

        if(key != null) encrypter.setKey(key.getBytes());    
    }//GEN-LAST:event_jButton1ActionPerformed

    
    
    
    
    
    
    
    
    
        
        /** Set the key **/
    public void actionKeyDialog(){
        String key = new String(encrypter.getKey());

        key = (String)JOptionPane.showInputDialog(this,
                "Enter a 16 byte key (current key= " +
                        key.getBytes().length + " bytes)",key);

        while(key != null && key.getBytes().length != 16){

            key = (String)JOptionPane.showInputDialog(this,
                    "Enter a 16 byte key (current key= " +
                            key.getBytes().length + " bytes)",key);
        }

        if(key != null) encrypter.setKey(key.getBytes());
    }

    /** Load an image from a file
     */
    public void actionLoadImage(File imageFile){

        if(imageFile == null){
            JFileChooser fc = new JFileChooser(fileName);
            fc.setControlButtonsAreShown(false);
            fc.showOpenDialog(this);
            imageFile = fc.getSelectedFile();
        }
		//sets the file if it is not null
        if(imageFile != null){

                panel.setImage(imageFromFile(imageFile));
  //              setFile(imageFile);
            }
    }

    /** Load an image from a file
     */
    private BufferedImage imageFromFile(File file){

        BufferedImage img = null;
        try{
            img = ImageIO.read(file);
        }catch(Exception e){
            System.out.println("Error:" + e);
        }
        return img;
    }

    /** set File methd for implementing encapsuletion
     * accesing private variables with public methods
     */
    public void setFile(File file){
        fileName = file;
    }
    
    /** Save an image from a file
     * @param file the name of the file to save, use "null" to access a dialog
     */
    public void actionSaveImage(File imageFile){

        if(imageFile == null){
            JFileChooser filechooser = new JFileChooser(fileName);
            filechooser.showSaveDialog(this);
            imageFile = filechooser.getSelectedFile();
        }

        if(imageFile != null){
            try{
                ImageIO.write(panel.getImage(), "png", imageFile);
            }catch(Exception e){
                System.out.println("Error:" + e);
            }
       //     setFile(imageFile);
        }
    }
    
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        try {
            panel.setImage(encrypter.map(panel.getImage(),true,false)); //Encrypt action listner
            // TODO add your handling code here:
        } catch (Exception ex) {
            Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        try {
            panel.setImage(encrypter.map(panel.getImage(),false,false)); //Decrypt action listner
        } catch (Exception ex) {
            Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        actionSaveImage(fileName);

    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        actionSaveImage(null);
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
        
            JFileChooser fc = new JFileChooser(fileName);
            fc.setControlButtonsAreShown(false);
            fc.showOpenDialog(this);
            imageFile = fc.getSelectedFile();
            
            panel.setImage(imageFromFile(imageFile));
          //  setFile(imageFile);
 
    }//GEN-LAST:event_jButton6ActionPerformed


    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NewJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JSeparator jSeparator2;
    // End of variables declaration//GEN-END:variables
}





//	ImageRead class draws image panel
// as well as override the paintcomponent which is called automatically in background
class ImageRead extends JPanel{

    private BufferedImage image;

    public ImageRead()
    {
        this.image = null;

        setFocusable(true);

        setLayout(null);
        setOpaque(true);

    }

    /** Sets the main Image **/
    public void setImage(BufferedImage image){

        this.image = image;
        repaint();
    }

    /** returns the image
     * image geter methd
     */
    public BufferedImage getImage(){
        return image;
    }

    /** Overwriding paint event for drawing 
     * 
     * the paintComponent is called internally when images change positions by 
     * resizing of jframe or changing focus. No method call for PaintComponent.
     * **/
    public void paintComponent(Graphics g) {
        g.setColor(new Color(34, 33, 33));
        g.fillRect(0,0,getSize().width,getSize().height);

        if(image != null){

            int center_x = getSize().width/2 - image.getWidth() /2;
            int center_y = getSize().height/2 - image.getHeight() /2;

            if(center_x < 10){ center_x = 10;}
            if(center_y < 10){ center_y = 10;}

            g.drawImage(image,center_x,center_y,null);
        }
    }
}


//The image encrypt class 
//this class holds methods for enrypting and decrypting images
class ImageEncrypt{

    private boolean verbose=false;
    private Random generator;

    private Cipher cipher;
    private SecretKeySpec skeySpec;

    /** Constructor */
    ImageEncrypt() {

        try{
            // Used for noise
            generator = new Random();

            KeyGenerator kgen = KeyGenerator.getInstance("AES"); //initiate with AES algorithm, can be changed to DES but the key size should be 56 bits
            kgen.init(128);
            /**initialize the encryption key with 128, 
            key could be 128, 196 or 256 using AES encryption algorithm
			*/
            SecretKey skey = kgen.generateKey();
            byte[] raw = skey.getEncoded();
            skeySpec = new SecretKeySpec(raw, "AES");

            cipher = Cipher.getInstance("AES/ECB/NoPadding");

        }catch(Exception e){ System.out.println("ERROR: " + e);}

    }

    /** Set the key **/
    public void setKey(byte [] key){

        skeySpec = new SecretKeySpec(key,"AES");
    }

    byte [] getKey(){ return skeySpec.getEncoded();}

    /** Encrypta and decrypt Image **/
    public BufferedImage map(BufferedImage image,boolean encrypt,boolean trick) throws Exception{


        // Test if the image is devisible by 2
        if(image.getWidth() % 2 != 0 || image.getHeight() % 2 != 0){
            throw(new Exception("Image size not multiple of 2 :("));
        }

        BufferedImage encImage = new BufferedImage(image.getWidth(),image.getHeight(),
                BufferedImage.TYPE_4BYTE_ABGR);

        if(encrypt){
            System.out.println("Encrypting Image ... trick=" + trick);//systemoutprintln was meant to be for a comand line users
            cipher.init(Cipher.ENCRYPT_MODE, skeySpec);
        }
        else{
            System.out.println("Decrypting Image ... trick=" + trick);
            cipher.init(Cipher.DECRYPT_MODE, skeySpec);
        }

        for(int x=0;x<image.getWidth(); x+=2){
            for(int y=0;y<image.getHeight(); y+=2){
                if(verbose) System.out.println("Block: (" + x+","+y+") -----");

                int counter =0;
                byte [] pixelBytes = new byte[16];
                // Loop through internal block
                for (int i=0;i<2;i++){
                    for (int j=0;j<2;j++){
                        int val = image.getRGB(x+i,y+j);
                       if(trick && encrypt) val +=x*y;
                        byte [] sub  = intToByteArray(val);

                        if(verbose){
                            System.out.println("Val: " + val + " Bytes: ");
                            printByteArray(sub);
                        }
                        for(int k=0;k<4;k++) pixelBytes[(counter)*4+k] = sub[k];
                        counter++;
                   }
                }

                // Cipher
                byte [] enc = cipher.doFinal(pixelBytes);
                if(verbose){
				    printByteArray(pixelBytes);
					printByteArray(enc);
                }
                counter =0;
         // Re-encode the new image
                for (int i=0;i<2;i++){
                  for (int j=0;j<2;j++){
                     byte [] sub = new byte[4];
					for(int k=0;k<4;k++) 
					sub[k] = enc[(counter)*4+k];

                int val = byteArrayToInt(sub);
                if(trick && !encrypt) val -=x*y;

                encImage.setRGB(x+i,y+j,val);

                counter++;
                    }
                }
            }
        }
        return encImage;
    }

    public static final byte[] intToByteArray(int value)
    {
        return new byte[] {
                (byte)(value >>> 24),
                (byte)(value >>> 16),
                (byte)(value >>> 8),
                (byte)value};
    }

    public static final int byteArrayToInt(byte [] b)
    {
        return (b[0] << 24)
                + ((b[1] & 0xFF) << 16)
                + ((b[2] & 0xFF) << 8)
                + (b[3] & 0xFF);
    }

    public static void printByteArray(byte [] array)
    {
        System.out.print("{");
        for(int i=0;i<array.length;i++)
            System.out.print(" " + array[i]);
        System.out.println(" }");
    }
}
